<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\Filesystem\Folder;
use Cake\Filesystem\File;
use RuntimeException;

/**
 * CrewSends Controller
 *
 * @property \App\Model\Table\CrewSendsTable $CrewSends
 *
 * @method \App\Model\Entity\CrewSend[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class CrewSendsController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $this->loadModels(["Files"]);
        $this->paginate = [
            'contain' => ['Categories', 'Statuses', 'Users']
        ];
        $crewSends = $this->paginate($this->CrewSends);

        $this->set(compact('crewSends', 'Files'));
    }

    /**
     * View method
     *
     * @param string|null $id Crew Send id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $crewSend = $this->CrewSends->get($id, [
            'contain' => ['Categories', 'Statuses', 'Users']
        ]);

        $this->set('crewSend', $crewSend);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $crewSend = $this->CrewSends->newEntity();

        $this->loadModels(["Files"]);
        $file_upload = $this->Files->newEntity();
                
        //if ($this->request->is('post')) {
        if ($this->request->is('post', "patch", "put")) {
            $crewSend = $this->CrewSends->patchEntity($crewSend, $this->request->getData(), ["associated" => ["files"]]);

            if($this->request->date["file_name"]){
                $file_upload = $this->Files->patchEntity($file_upload, $this->request->getData());
                $dir = realpath(WWW_ROOT . "/upload_file");
                $limitFileSize = 1024 * 1024;
                try {
                  $file_upload["file"] = $this->fileupload($this->request->date["file_name"], $dir, $limitFileSize);
                }catch(RuntimeException $e){
                  $this->Flash->error(__("ファイルのアップロードができませんでした"));
                  $this->Flash->error(__($e->getMessage()));
                }
            }else{
               print(__('添付ファイルなし')); 
            }

            if ($this->CrewSends->save($crewSend)) {
                $this->Flash->success(__('The crew send has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The crew send could not be saved. Please, try again.'));
        }
        $categories = $this->CrewSends->Categories->find('list', ['limit' => 200]);
        $statuses = $this->CrewSends->Statuses->find('list', ['limit' => 200]);
        $users = $this->CrewSends->Users->find('list', ['limit' => 200]);
        $this->set(compact('crewSend', 'categories', 'statuses', 'users', "file_upload"));
    }

    /**
     * Edit method
     *
     * @param string|null $id Crew Send id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $crewSend = $this->CrewSends->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $crewSend = $this->CrewSends->patchEntity($crewSend, $this->request->getData());
            if ($this->CrewSends->save($crewSend)) {
                $this->Flash->success(__('The crew send has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The crew send could not be saved. Please, try again.'));
        }
        $categories = $this->CrewSends->Categories->find('list', ['limit' => 200]);
        $statuses = $this->CrewSends->Statuses->find('list', ['limit' => 200]);
        $users = $this->CrewSends->Users->find('list', ['limit' => 200]);
        $this->set(compact('crewSend', 'categories', 'statuses', 'users'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Crew Send id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $crewSend = $this->CrewSends->get($id);
        if ($this->CrewSends->delete($crewSend)) {
            $this->Flash->success(__('The crew send has been deleted.'));
        } else {
            $this->Flash->error(__('The crew send could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function file_upload($file = null, $dir = null, $limitFileSize = 1024 * 1024){
      try{
        //ファイルを保存するフォルダのチェック
        if($dir){
          if(!file_exists($dir)){
            throw new RuntimeException("指定のディレクトリがありません");
          }
        }else{
          throw new RuntimeException("ディレクトリの指定がありません");
        }

        //未定義、破損攻撃は無効処理
        if(!isset($file["error"])){
          throw new RuntimeException("Invalid parameters");
        }

        //エラーチェック
        switch($file["error"]){
          case 0:
            break;
          case UPLOAD_ERR_OK:
            break;
          case UPLOAD_ERR_NO_FILE:
            throw new RuntimeException("Exceeded filesize limit");
          default:
            throw new RuntimeException("Unknown errors");
        }

        //ファイル情報取得
        $fileInfo = new File($file["tmp_name"]);

        //ファイルサイズチェック
        if($fileInfo->size() > $limitFileSize){
          throw new RuntimeException("Exceeded filesize limit");
        }

        //ファイル名取得
        $uploadFile = $fileInfo->name();

        //ファイルの移動
        if(!move_uploaded_file($file["tmp_name"], $dir . "/" . $uploadFile)){
          throw new RuntimeException("Failed to move uploaded file");
        }
      }catch(RuntimeException $e){
        throw $e;
      }
      return $uploadFile;
    }
}
